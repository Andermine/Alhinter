id: OVERWORLD
version: 0.1.0
author: "Astrash, Sancires"

generator: NOISE_3D

addons:
  - biome-provider-pipeline
  - biome-provider-single
  - chunk-generator-noise-3d
  - config-biome
  - config-flora
  - config-noise-function
  - config-ore
  - config-palette
  - config-distributors
  - config-locators
  - config-feature
  - structure-terrascript-loader
  - structure-sponge-loader
  - language-yaml
  - generation-stage-feature

# ---
# Biome distribution
# ---
# Several preset biome providers are available to choose from below.
# Chosing which one is in use is as simple as commenting the enabled one
# (by adding a # at the start) and uncommenting the one you wish to use.
# You can further configure the behaviour of each one in their respective files.

# Default biome distribution
biomes: $biome-providers/default_pipeline.yml:biomes

# Single biome - to change the single biome to use, check the configuration file.
#biomes: $biome-providers/single.yml:biomes

# TODO: Continental - Generates large continents
#biomes: $biome-providers/continental.yml:biomes

# TODO: Water world - Ocean biomes only
#biomes: $biome-providers/water-world.yml:biomes

# TODO: Desert world - Hot biomes only
#biomes: $biome-providers/desert-world.yml:biomes

# TODO: Frozen World - Frozen biomes only
#biomes: $biome-providers/frozen-world.yml:biomes

stages:
  - FEATURE

functions:
#  "<<":
#    - math/functions/lerp.yml:functions
#    - math/functions/maskSmooth.yml:functions
#    - math/functions/terrace.yml:functions
  lerp:
    # Linear interpolation between two values
    arguments:
      - t
      - at # Value of t where output = a
      - a
      - bt # Value of t where output = b
      - b
      # Values of t between at and bt will be interpolated
    expression: |
      if(at<bt,
        if(t<=at,a,if(t>=bt,b,a*(t-bt)/(at-bt)+b*(t-at)/(bt-at))),
        if(t>=at,a,if(t<=bt,b,a*(t-bt)/(at-bt)+b*(t-at)/(bt-at)))
      )
  maskSmooth:
    # Ramp function from 0 to value, typically used to mask a noise function by another
    arguments:
      - v  # Value
      - lb # When mask <= lb, returns 0
      - ub # When mask >= ub, returns v
      # Otherwise, output is interpolated between 0 and v using a hermite curve
      - m  # Mask, typically a noise function
    expression: |
      if(lb<ub,
        if(m<=lb,0,if(m>=ub,v,v*(3*((m-lb)/(ub-lb))^2-2*((m-lb)/(ub-lb))^3))),
        if(m>=lb,0,if(m<=ub,v,v*(3*((m-lb)/(ub-lb))^2-2*((m-lb)/(ub-lb))^3)))
      )
  # Temporary ugly expanded versions until nested functions are added
  # Cleaned up versions can be found in the /math/functions/terrace.yml file
  terrace:
    arguments:
      - i  # Input
      - sc # Scale
      - o  # Offset
      - g  # Gap
    expression: sc*(|(if(0<=(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g)&&(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g)<1,(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),0))-0.5|-0.5)+i
  terraceParabolic:
    arguments:
      - i  # Input
      - sc # Scale
      - o  # Offset
      - g  # Gap
    expression: |
      i+sc*(-0.25+(-0.5+if(0<=(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g)&&
                            1>(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),
                              (i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),0))^2)
  terraceParalinear:
    arguments:
      - i  # Input
      - sc # Scale
      - o  # Offset
      - g  # Gap
    expression: |
      i+sc*if(0.25<if(0<=(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g)&&
                       1>(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),
                         (i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),0)&&
                   if(0<=(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g)&&
                       1>(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),
                         (i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),0)<0.75,
                2*(if(0<=(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g) &&
                       1>(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),
                         (i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),0)-0.5)^2-0.375,
                  |if(0<=(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g)&&
                       1>(i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),
                         (i/sc-o)-floor((i/sc-o)/(1+g))*(1+g),0)-0.5|-0.5)

noise:
  simplex:
    dimensions: 2
    type: FBM
    octaves: 4
    function:
      type: OPEN_SIMPLEX_2
      frequency: 0.0075